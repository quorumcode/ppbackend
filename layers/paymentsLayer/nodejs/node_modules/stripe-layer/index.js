const stripe = require('stripe')(process.env.stripeKey)
const { Name } = require('models')

exports.createCustomer = async (usereDetails, primaryNumber) => {
  const stripeCustomerObject = customerAdapter(usereDetails, primaryNumber)
  const response = await stripe.customers.create(stripeCustomerObject)
  return response
}

const customerAdapter = (usereDetails, primaryNumber) => {
  const phone = primaryNumber
  let {
    name,
    address,
    email
  } = usereDetails
  name = new Name(name).legal
  address = !!address ? {
    city: address.locality,
    country: 'GB',
    line1: address.route,
    line2: address.number,
    state: address.administrative_division,
    postal_code: address.postal_code
  } : { country: 'GB' }
  return {
    phone,
    name,
    email,
    address
  }
}

exports.updateCustomer = async (customer, usereDetails, primaryNumber) => {
  const { stripeID: stripeCustomerID } = customer
  const stripeCustomerObject = customerAdapter(usereDetails, primaryNumber)
  await stripe.customers.update(
    stripeCustomerID,
    stripeCustomerObject
  )
}

exports.retrievePM = async (pmID) => {
  const paymentMethod = await stripe.paymentMethods.retrieve(
    pmID
  )
  if ('error' in paymentMethod) {
    return { error: true }
  }
  //console.log(`paymentMethod\n${JSON.stringify(paymentMethod, null, 2)}`);
  const { last4: digits, brand: type, funding,
    exp_year: expire_year, exp_month: expire_month,
    country: country_code, name, fingerprint, three_d_secure_usage
  } = paymentMethod.card ?? {};
  const support3dsecure = three_d_secure_usage?.supported;

  return {
    pmID,
    digits,
    type,
    expiration: new Date(`${expire_year}-${expire_month}`),
    funding, expire_year, expire_month,
    country_code, name, fingerprint, support3dsecure,
  }
}

exports.attachPaymentMethods = async (pmID, customer) => {
  await stripe.paymentMethods.attach(
    pmID,
    { customer }
  )
}

exports.detachPaymentMethod = async (pmID) => {
  await stripe.paymentMethods.detach(
    pmID
  )
}

exports.createSI = async (customer) => {
  const setupIntent = await stripe.setupIntents.create({
    customer,
    usage: 'off_session'
  })
  return setupIntent
}

exports.retrieveCustomer = async (customer) => {
  const customerDetails = await stripe.customers.retrieve(
    customer
  )
  return customerDetails
}

exports.chargePayment = async (repayment, customerID, pmID) => {
  const advance = await stripe.paymentIntents.create({
    amount: repayment,
    currency: 'gbp',
    payment_method_types: ['card'],
    customer: customerID,
    payment_method: pmID,
    confirm: 'true'
  })
  return advance
}
