const AWS = require('aws-sdk')
const lambda = new AWS.Lambda()

// this is a separately deployed function with a static IP (via VPC)
// see the template yml for the function name (default name: util_http_client)
// see httpClient folder to see the function source
const HTTP_CLIENT = process.env.httpClientFunction
const APNS_SERVICE = process.env.apnsService
const URL_TO_S3 = (process.env.urlToS3 || 'util_url_to_s3')
const URL_TO_FORMDATA = (process.env.urlToFormdata || 'util_kyc_upload')
const MAILER = (process.env.mailerFunction || 'pollen_mailer_function')

class HttpClient {
  static httpClientFunction = HTTP_CLIENT
  static kycJugglerFunction = 'util_kyc_upload'

  static async reptillianRequest (method, url, payload, headers, responseType = 'body', payloadType = 'raw') {
    const reptillianURL = 
    'https://8mzxynf46b.execute-api.eu-west-2.amazonaws.com/default/util_http_client_4' + 
    '?' +
    'url=' + url + '&' +
    'payload=' + encodeURI(JSON.stringify(payload)) + '&' +
    'headers=' + encodeURI(JSON.stringify(headers)) + '&' +
    'method=' + method + '&' +
    'responseType=' + responseType + '&' +
    'payloadType=' + payloadType

    let body = await lambda.invoke({
      FunctionName: this.httpClientFunction,
      Payload: JSON.stringify({
        method: 'GET',
        url: reptillianURL,
        headers: null,
        payload: null,
        responseType: 'body',
        payloadType: 'raw'
      }),
      InvocationType: 'RequestResponse'
    }).promise()
    body = JSON.parse(body.Payload)
    return body
  }
  
  static async request (method, url, payload, headers, responseType = 'body', payloadType = 'raw') {
    const body = await lambda.invoke({
      FunctionName: this.httpClientFunction,
      Payload: JSON.stringify({
        method,
        url,
        headers,
        payload,
        responseType, // 'body' to return body, 'statusCode' to return statusCode
        payloadType
      }),
      InvocationType: 'RequestResponse'
    }).promise()
    console.log(body)
    return JSON.parse(body.Payload)
  }

  static async invoke (method, url, payload, headers) {
    const body = await lambda.invoke({
      FunctionName: this.httpClientFunction,
      Payload: JSON.stringify({
        method: method,
        url: url,
        headers: headers,
        payload: payload,
        responseType: 'body',
        payloadType: 'raw'
      }),
      InvocationType: 'Event'
    }).promise()
    return body
  }
}
exports.HttpClient = HttpClient

exports.invokeFunction = async (functionName, payload = {}) => {
  await lambda.invoke({
    FunctionName: functionName,
    Payload: JSON.stringify(payload),
    InvocationType: 'Event'
  }).promise()
}

class APNSService {
  constructor (devices, env = ['dev', 'prod']) { 
    const tokens = []
    for (const deviceID of Object.keys(devices)) {
      tokens.push(...devices[deviceID])
    }
    Object.assign(this, { tokens, env })
  }
  static apnsFunction = APNS_SERVICE

  async sendPush (payload) {
    let { tokens, env } = this
    if (typeof env !== 'object') { env = [env] }
    if (!tokens || typeof tokens !== 'object') { return 0 }
    for (const deviceToken of tokens) {
      for (const environment of env) {
        lambda.invoke({
          FunctionName: APNSService.apnsFunction,
          Payload: JSON.stringify({
            deviceToken,
            environment,
            payload
          }),
          InvocationType: 'Event'
        }).promise()
      }
    }
  }

  async sendWalletUpdate (limit, unlocked = false) {
    const payload = {
      aps: {
        'content-available': 1,
        sound: ''
      },
      type: 'walletUpdate',
      wallet: {
        limit,
        unlocked
      }
    }
    await this.sendPush(payload)
  }

  async sendKycStatusUpdate (kycStatusObject) {
    const { IDStatus, addressStatus, emailConfirmed, paymentMethodAdded } = kycStatusObject
    const payload = {
      aps: {
        'content-available': 1,
        sound: ''
      },
      type: 'kycStatusUpdate',
      kycStatus: {
        IDStatus,
        addressStatus,
        emailConfirmed,
        paymentMethodAdded
      }
    }
    await this.sendPush(payload)
  }
}
exports.APNSService = APNSService

exports.imageUploader = async (name, url) => {
  const { body } = await lambda.invoke({
    FunctionName: URL_TO_S3,
    Payload: JSON.stringify({
      name,
      url
    }),
    InvocationType: 'Event'
  }).promise()
  return body
}

exports.KYCuploader = async (s3_url, target_url, target_headers) => {
    await lambda.invoke({
    FunctionName: URL_TO_FORMDATA,
    Payload: JSON.stringify({
      s3_url,
      target_headers,
      target_url
    }),
    InvocationType: 'Event'
  }).promise()
}
 
exports.mailer = async (recipients, subject, mailbody, cc = []) => {
  await lambda.invoke({
    FunctionName: MAILER,
    Payload: JSON.stringify({
      recipients,
      cc,
      subject,
      mailbody
    }),
    InvocationType: 'Event'
  }).promise()
}