const AWS = require('aws-sdk');
const dynamo = new AWS.DynamoDB.DocumentClient(require('./cfg.js'));

const TABLE = process.env.eventTable

class EventClient {
  constructor (txID) {
    Object.assign(this, { txID })
  }

  async query (timestamp = 0) {
    const { txID } = this
    let queryWithMeta = await dynamo.query({
      TableName: TABLE,
      KeyConditionExpression: '#txid = :txid and #timestamp < :timestamp)',
      ExpressionAttributeValues: {
        ':txid': txID,
        ':timestamp': timestamp
      },
      ExpressionAttributeNames: {
        '#txid': 'txid',
        '#timestamp': 'timestamp'
      },
      ScanIndexForward: false
    }).promise()
    return queryWithMeta
  }

  static async queryTypeIndex (type, timestamp = 0) {
    let query = await dynamo.query({
      TableName: TABLE,
      IndexName: 'type',
      KeyConditionExpression: '#type = :hkey and #timestamp < :rkey',
      ExpressionAttributeValues: {
        ':hkey': type,
        ':rkey': timestamp
      },
      ExpressionAttributeNames: {
        '#type': 'type',
        '#timestamp': 'timestamp'
      }
    }).promise()
    const { Items: items, Count: count } = query
    return { items, count }
  }

  static async putEvent (txID, timestamp, type) {
    await dynamo.put({
      TableName: TABLE,
      Item: {
        txID,
        timestamp,
        type
      }
    }).promise()
  }

  async updateField (timestamp, field, val) {
    const { txID } = this
    await dynamo.update({
      TableName: TABLE,
      Key: {
        txID,
        timestamp
      },
      UpdateExpression: 'SET #field = :val',
      ExpressionAttributeNames: {
        '#field': field
      },
      ExpressionAttributeValues: {
        ':val': val
      }
    }).promise()
  }

  async markResolved (timestamp, type) {
    await this.updateField(
      timestamp,
      'type',
      `${type}-resolved`
    )
  }

  static async markResolvedAny (eventObj) {
    const { txID: eventID, timestamp, type } = eventObj
    const eventTable = new EventClient(eventID)
    await eventTable.markResolved(timestamp, type)
  }

}
exports.EventClient = EventClient