const AWS = require('aws-sdk');
const dynamo = new AWS.DynamoDB.DocumentClient(require('./cfg.js'));

const TABLE = process.env.loanTable

class LoanClient {
  constructor (userName) {
    Object.assign(this, { userName })
  }

  async query (loanStateID) {
    const { userName } = this
    let queryWithMeta = await dynamo.query({
      TableName: TABLE,
      KeyConditionExpression: '#user = :user and begins_with (#rec, :rec)',
      ExpressionAttributeValues: {
        ':user': Number(userName),
        ':rec': loanStateID
      },
      ExpressionAttributeNames: {
        '#user': 'userID',
        '#rec': 'loanStateID'
      },
      ScanIndexForward: false
    }).promise()
    return queryWithMeta
  }

  async getNonArchivedStates () {
    const { userName } = this
    const query = await dynamo.query({
      TableName: TABLE,
      IndexName: 'archived',
      KeyConditionExpression: '#user = :user and #status = :status',
      ExpressionAttributeValues: {
        ':user': Number(userName),
        ':status': 0
      },
      ExpressionAttributeNames: {
        '#user': 'userID',
        '#status': 'archived'
      }
    }).promise()
    if (query.Count > 0) {
      return query.Items
    } else {
      return []
    }
  }

  async updateField (loanStateID, field, val) {
    const { userName } = this
    await dynamo.update({
      TableName: TABLE,
      Key: {
        userID: Number(userName),
        loanStateID
      },
      UpdateExpression: 'SET #field = :val',
      ExpressionAttributeNames: {
        '#field': field
      },
      ExpressionAttributeValues: {
        ':val': val
      }
    }).promise()
  }

  async archiveLoanState (loanStateID) {
    await this.updateField(
      loanStateID,
      'archived',
      Date.now()
    )
  }

  async putState (loanStateID, payload) {
    const { userName } = this
    await dynamo.put({
      TableName: TABLE,
      Item: {
        userID: Number(userName),
        loanStateID,
        ...payload
      }
    }).promise()
  }

}
exports.LoanClient = LoanClient