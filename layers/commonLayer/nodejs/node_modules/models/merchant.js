const { invertObj } = require('ramda')

class Merchant {
  constructor (props) {
    Object.assign(this, props) 
  }

  static get listRecords () {
    return [
      'details',
      'product',
      'productGroup',
      'campaign',
      'user',
      'location'
    ]
  }

  static get categoriesEnum () {
    return {
      0: 'Most Popular',
      1: 'Fashion & Accessories',
      2: 'Aesthetics & Beauty Services',
      3: 'Beauty & Skincare Products',
      4: 'Lifestyle',
      5: 'Electronics & Tech',
      6: 'Gifts',
      7: 'Sports & Outdoors',
      13: 'Home',
      9: 'Pets',
      11: 'Gaming',
      12: 'Travel & Events',
      14: 'Food & Drink',
      8: 'Automotive',
      10: 'Kids'
    }
  }

  static getCategory (props) {
    const { key, val } = props
    const { categoriesEnum } = Merchant
    if (key != null && key in categoriesEnum) { return Number(categoriesEnum[key]) }
    if (val != null && val in invertObj(categoriesEnum) ) { return invertObj(categoriesEnum)[val] }
    return false
  }

  get details () {
    const {
      merchantName,
      merchant: ID,
      relevanceIndex: index,
      imageURL: ImageURL,
      logoURL: LogoURL,
      deal,
      category,
      subcategory,
      created,
      popular,
      inStore,
      online,
      link: Link,
      direct,
      parent,
      allowCustomAmounts
    } = this
    return {
      Merchant: merchantName,
      ID,
      allowCustomAmounts,
      index,
      ImageURL,
      LogoURL,
      Link,
      deal,
      category,
      subcategory,
      inStore,
      online,
      direct: (direct === false) ? null : direct,
      parent,
      popular: (popular != null) ? !!(popular) : false,
      created: (created != null) ? created : '2021-11-11T11:11:11.111Z'
    }
  }

  get product () {
    const { 
      productID,
      index,
      imageURL,
      name,
      priceSansTax,
      taxPercent,
      totalPrice,
      productGroupID
    } = this
    return {
      productID,
      index,
      imageURL,
      name,
      priceSansTax,
      taxPercent,
      totalPrice,
      productGroupID
    }

  }

  get productGroup () {
    const {
      productGroupID,
      index,
      name
    } = this
    return {
      productGroupID,
      index,
      name
    }
  }

  get campaign () {
    const {
      title,
      description,
      status,
      link
    } = this
    return {
      title,
      description,
      status,
      link
    }
  }

  get user () {
    const {
      email,
      hash, // from bcrypt
      billing,
      orders,
      settlements
    } = this
    return {
      email,
      hash, 
      billing,
      orders,
      settlements
    }
  }

  get locations () {
    const {
      lat,
      lng,
      address,
      primary
    } = this
    return {
      lat,
      lng,
      address,
      primary
    }
  }

  static category
}

exports.Merchant = Merchant