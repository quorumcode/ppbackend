const { invalidPostalCode } = require('messages')

class User {
  constructor (data) {
    Object.assign(this, data)
  }

  static get listRecords () {
    return [
      'details',
      'settings',
      'primary',
      'recovery',
      'status',
      'wallet',
      'customer',
      'apns',
      'paymentMethod'
    ]
  }

  get details () {
    const { profileURL, name, address, dob, email, emailConfirmed, sex } = this
    return { profileURL, name, address, dob, email, emailConfirmed, sex }
  }

  get settings () {
    const { notifications, marketing } = this
    return { notifications, marketing }
  }

  get primary () {
    const { primaryNumber, primaryStatus } = this
    return { primaryNumber, primaryStatus }
  }

  get recovery () {
    const { recoveryNumber, recoveryStatus } = this
    return { recoveryNumber, recoveryStatus }
  }

  get status () {
    const { KYCDate, created, blocked, deleted, softlocked, verificationID } = this
    return { KYCDate, created, blocked, deleted, softlocked, verificationID }
  }

  get wallet () {
    const { limit, lockTimestamp, card, activeCard } = this
    return { limit, lockTimestamp, card, activeCard }
  }

  get customer () {
    const { stripeID, lerexID, primaryPaymentMethod } = this
    return { stripeID, lerexID, primaryPaymentMethod }
  }
  
  get apns () {
    const { devices } = this
    return { devices } // { deviceID: [deviceToken] }
  }

  get paymentMethodTypes () {
    return {
      mastercard: 0,
      visa: 1,
      amex: 2,
      other: 3
    }
  }

  get paymentMethod () {
    const { pmID, type, digits, paymentMethodTypes, addedTimestampS } = this
    return {
      pmID,
      type: (!!paymentMethodTypes[type]) ? paymentMethodTypes[type] : paymentMethodTypes.other,
      digits,
      addedTimestampS,
      primary: false
    }
  }

  get validatePayload () {
    let valid = true
    let errorMessage = null
    // check postcode
    const { address } = this
    if (address != null) {
      let { postal_code: postalCode } = address
      postalCode = postalCode.toUpperCase()
      const regex = '^[A-Z]{1,2}[0-9][A-Z0-9]? ?[0-9][A-Z]{2}$'
      if (RegExp(regex, 'g').test(postalCode) === false) {
        errorMessage = invalidPostalCode
        valid = false
      }
    }
     return {
       valid,
       errorMessage
     }
  }

}
exports.User = User
