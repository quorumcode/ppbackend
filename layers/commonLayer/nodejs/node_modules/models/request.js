// const { getPrincipalFromProxyEvent } = require('utils')
const getPrincipalFromProxyEvent = (event) => {
  return event.requestContext.authorizer.principalId
}

class Request {
  constructor (props) {
    Object.assign(this, props)
  }

  static generic (event) {
    return {
      userID: `+${getPrincipalFromProxyEvent(event)}`
    }
  }

  static register (event) {
    const body = JSON.parse(event.body)
    return new Request({
      userName: body.user
    })
  }

  static verify (event) {
    const { user, session, code } = JSON.parse(event.body)
    return new Request({
      userName: user,
      session,
      code
    })
  }

  static updateUser (event) {
    return new Request({
      userName: '+' + event.user.toString(),
      details: event.body.data.details,
      settings: event.body.settings
    })
  }

  static getUser (event) {
    return new Request({
      userName: '+' + event.user.toString()
    })
  }

  static directLogin (event) {
    return new Request({
      userName: JSON.parse(event.body).userName,
      password: JSON.parse(event.body).password
    })
  }

  static getDirect (event) {
    return new Request({
      email: getPrincipalFromProxyEvent(event).email
    })
  }

  static customers (event) {
    return new Request({
      email: getPrincipalFromProxyEvent(event).email,
      meta: {
        sort: 'date_desc',
        pageCount: 1,
        page: 0,
        perPage: null,
        ...getQueryParamsFromProxyEvent(event)
      }
    })
  }

  static directOrders (event) {
    return new Request({
      email: getPrincipalFromProxyEvent(event).email,
      meta: {
        sort: 'date_desc',
        pageCount: 1,
        page: 0,
        perPage: null,
        ...getQueryParamsFromProxyEvent(event)
      }
    })
  }

  static directCustomerDetails (event) {
    return new Request({
      email: getPrincipalFromProxyEvent(event).email,
      meta: {
        sort: 'date_desc',
        pageCount: 1,
        page: 0,
        perPage: null,
        customerID: null,
        ...getQueryParamsFromProxyEvent(event)
      }
    })
  }

  static orderDetails (event) {
    return new Request({
      email: getPrincipalFromProxyEvent(event).email,
      loanID: getQueryParamsFromProxyEvent(event).loanID
    })
  }

  static settlements (event) {
    return new Request({
      email: getPrincipalFromProxyEvent(event).email,
      meta: {
        sort: 'date_desc',
        pageCount: 1,
        page: 0,
        perPage: null,
        ...getQueryParamsFromProxyEvent(event)
      }
    })
  }

  static settlementDetails (event) {
    return new Request({
      email: getPrincipalFromProxyEvent(event).email,
      settlementID: getQueryParamsFromProxyEvent(event).id,
      meta: {
        sort: 'date_desc',
        pageCount: 1,
        page: 0,
        perPage: 10,
        ...getQueryParamsFromProxyEvent(event)
      }
    })
  }

  static getRepaymentsScheme (event) {
    return new Request({
      userName: `+${getPrincipalFromProxyEvent(event)}`,
      totalAmount: event.body.total_amount,
      repaymentsNumber: event.body.repayments_number
    })
  }

  static checkLoanCap (event) {
    return new Request({
      userName: `+${getPrincipalFromProxyEvent(event)}`
    })
  }

  static getKYCResource (event) {
    const { verificationID: vID, includesID, includesAddress }  = JSON.parse(event.body)
    return {
      userName: `+${getPrincipalFromProxyEvent(event)}`,
      vID,
      includesID,
      includesAddress
    }
  }

  static getUser (event) {
    return {
      userName: `+${getPrincipalFromProxyEvent(event)}`
    }
  }

  static updateUser (event) {
    const { data } = JSON.parse(event.body)
    return {
      userName: `+${getPrincipalFromProxyEvent(event)}`,
      ...data
    }
  }

  static uploadprofileimage (event) {
    const { image } = JSON.parse(event.body)
    return {
      userName: `+${getPrincipalFromProxyEvent(event)}`,
      image
    }
  }

  static categoryID (event) {
    const { path } = event
    const category = path.split('/')[2]
    return { category }
  }

  static postCards (event) {
    const { pmID } = JSON.parse(event.body)
    return {
      userName: `+${getPrincipalFromProxyEvent(event)}`,
      pmID
    }
  }

  static putCards (event) {
    const { pmID, primary } = JSON.parse(event.body)
    return {
      userName: `+${getPrincipalFromProxyEvent(event)}`,
      pmID,
      primary
    }
  }

  static deleteCards (event) {
    const { pmID } = JSON.parse(event.body)
    return {
      userName: `+${getPrincipalFromProxyEvent(event)}`,
      pmID
    }
  }

  static getCards (event) {
    return {
      userName: `+${getPrincipalFromProxyEvent(event)}`
    }
  }

  static newSeti (event) {
    return {
      userName: `+${getPrincipalFromProxyEvent(event)}`
    }
  }

  static postLoan (event) {
    const {
      number,
      repayment_amount,
      merchant_name,
      serviceIDs,
      customAmount,
      customNote,
      merchant_url,
      merchantID,
      pmID,
      customItems,
      fromVirtualCard,
      dontChargeMerchant,
      dontChargeAdvance
    } = JSON.parse(event.body)
    return {
      userName: `+${getPrincipalFromProxyEvent(event)}`,
      number,
      repaymentAmount: repayment_amount,
      merchantName: merchant_name,
      serviceIDs,
      customAmount,
      customNote,
      merchantURL: (merchant_url ||  'pollenpay.com'),
      merchantID,
      pmID,
      customItems,
      fromVirtualCard,
      dontChargeMerchant,
      dontChargeAdvance
    }
  }

  static getLoanCap (event) {
    return {
      userName: `+${getPrincipalFromProxyEvent(event)}`
    }
  }

  static getLoan (event) {
    const { loan_id } = JSON.parse(event.body)
    return {
      userName: `+${getPrincipalFromProxyEvent(event)}`,
      loanID: loan_id
    }
  }

  static getRepaymentsScheme (event) {
    const { total_amount, repayments_number } = JSON.parse(event.body)
    return {
      userName: `+${getPrincipalFromProxyEvent(event)}`,
      totalAmount: total_amount,
      number: repayments_number
    }
  }

  static checkLoanCap (event) {
    return {
      userName: `+${getPrincipalFromProxyEvent(event)}`
    }
  }

  static getPurchases (event) {
    const { list, page, per_page } = JSON.parse(event.body)
    return {
      userName: `+${getPrincipalFromProxyEvent(event)}`,
      list,
      page,
      perPage: per_page
    }
  }

  static earlyRepay (event) {
    const { loan_id, repayment_amount } = JSON.parse(event.body)
    return {
      userName: `+${getPrincipalFromProxyEvent(event)}`,
      loanID: loan_id,
      amount: repayment_amount
    }
  }

  static activateCard (event) {
    return {
      userName: `+${getPrincipalFromProxyEvent(event)}`
    }
  }

  static getCard (event) {
    return {
      userName: `+${getPrincipalFromProxyEvent(event)}`
    }
  }

  static unlockCard (event) {
    return {
      userName: `+${getPrincipalFromProxyEvent(event)}`
    }
  }

  static refreshToken (event) {
    const { refresh, user } = JSON.parse(event.body)
    return {
      userName: user,
      refresh
    }
  }

  static webhookHandler (event) {
    const body = JSON.parse(event.body)
    if (body.validationValue) {
    body.type = '3DSECURE'
    } else if (body.rejectReason != "") {
      body.type = 'REJECT'
    } else {
      body.type = 'TRANSACTION'
    }
    return {
      ...body
    }
  }

  static lockWallet (event) {
    const { txID: eventID, timestamp: eventTimestamp } = event
    return {
      userName: eventID.split('-')[0],
      eventTimestamp
    }
  }

  static postPushToken (event) {
    const { deviceID, token } = JSON.parse(event.body)
    return {
      userName: `+${getPrincipalFromProxyEvent(event)}`,
      deviceID,
      token
    }
  }

  static walletCheckKYC (event) {
    return {
      userName: `+${getPrincipalFromProxyEvent(event)}`
    }
  }

  static transactionEvent (event) {
    const { txID, timestamp } = event
    const segments = txID.split('-')
    return {
      userName: segments[0],
      loanID: segments[1],
      txID,
      timestamp,
      automated: true
    }
  }

  static checkEmail (event) {
    const { email } = JSON.parse(event.body)
    return {
      userName: `+${getPrincipalFromProxyEvent(event)}`,
      email
    }
  }

  static resendConfirmation (event) {
    return {
      userName: `+${getPrincipalFromProxyEvent(event)}`
    }
  }

  static userName (event) {
    return {
      userName: `+${getPrincipalFromProxyEvent(event)}`
    }
  }

  static recoveryPost (event) {
    const { recovery: recoveryNumber } = JSON.parse(event.body)
    return {
      userName: `+${getPrincipalFromProxyEvent(event)}`,
      recoveryNumber
    }
  }

  // Hotfix 3: Allowed receving both identityID and verificationID
  static postKYC (event) {
    const { identityID, verificationID } = JSON.parse(event.body)
    return {
      userID: `+${getPrincipalFromProxyEvent(event)}`,
      identityID: identityID || verificationID
    }
  }

  static metamapWebhook (event) {
    const { matiDashboardUrl, identityStatus: status, eventName } = JSON.parse(event.body)
    return { matiDashboardUrl, status, eventName, flow: event.flow }
  }
}
exports.Request = Request
