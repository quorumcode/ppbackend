
const MODE = process.env.mode || "mock";

const mysql_client = require('pp-mysql/client');
const {
    Q, q,
    $exe,
    $tbl,
    $row,
    $one,
} = mysql_client.shorthands();


const { UserPhone } = require("./UserPhone");

const { UserClient } = require('aws-layer');



class User {
    /**
    * ensures existence of crucial records in user_* tables
    * creates stripe account if needed
    */
    static async mk_user(ctx, data = {}) {
        const {
            conn = mysql_client,
            dt: ctx_dt,
        } = ctx || {};

        let {
            user_ppid,
        } = data || {};


        // imported logic from users/update.js handleNewCustomer

        await conn.$trx({ nest: true }, async (conn) => {
            const dt = await conn.$one(`SELECT @dt := ${ctx_dt == null ? `NOW(6)` : conn.q(ctx_dt)}`);

            const uc = await UserClient.fromPPID({ conn, dt }, user_ppid);

            //UPD: this seems unnecessary
            // check record for primary number which is not a field submitted by the client during the user creation
            //let exists_primary = await uc.exists("primary")
            //if (!exists_primary) {
            //    await uc.updateMultipleFields("primary", {
            //        user_ppid,
            //        primaryNumber: uc.userName, // LEGACY
            //        primaryStatus: true, // LEGACY!!!
            //    });
            //}

            //UPD: `softlocked` should be a generated field, so the whole `status` record initialization seem unnecessary
            let exists_status = await uc.exists("status")
            if (!exists_status) {
                await uc.putRecord("status", {
                    user_ppid,
                    verificationID: false,
                    softlocked: true,
                });
            }
            else {
                await this.query_stripe({ conn, dt }, { user_ppid });
            }


            // nothing on success, errors are thrown
        });

        //const user_row = await conn.$row(`
        //    INSERT INTO user
        //    SET _seed = ${conn.q(seed)}${dt == null ? `` : `, dt = ${conn.q(dt)}`}
        //    RETURNING user_ppid, dt
        //`);
        //
        //return user_row;
    };

    /**
    * request Stripe account (create if needed)
    * return { status, stripeID: null | string }
    * status:
    *   pending
    *   unverified
    *   ok
    * throws on error
    */
    static async query_stripe(ctx, data = {}) {
        const {
            conn = mysql_client,
            dt: ctx_dt,
        } = ctx || {};

        let {
            user_ppid,
        } = data || {};

        await conn.$trx({ nest: true }, async (conn) => {
            const dt = await conn.$one(`SELECT @dt := ${ctx_dt == null ? `NOW(6)` : conn.q(ctx_dt)}`);

            const uc = await UserClient.fromPPID({ conn, dt }, user_ppid);

            let user_customer_row = await uc.customer();
            let { stripeID: user_stripeID } = user_customer_row || {};
            if (user_stripeID) {
                if ("pending" == user_stripeID) {
                    return {
                        status: "pending",
                        stripeID: null,
                    };
                }
                return {
                    status: "ok",
                    stripeID: user_stripeID,
                };
            }

            const user_details_row = await uc.details()
            const { verificationID: verified } = await uc.status()

            const stripe_user_phone = uc._phone;
            const stripe_user_details = {
                name: user_details_row.name,
                address: user_details_row.address,
                email: user_details_row.email,
            };

            if (!verified) {
                return {
                    status: "unverified",
                    stripeID: null,
                };
            }

            // in fact this statement is now useless because we're inside transaction, so to be cut
            await uc.updateMultipleFields("customer", {
                stripeID: "pending",
            });

            try {
                const { id: user_stripeID } = await createCustomer(stripe_user_details, stripe_user_phone);
                await uc.updateMultipleFields("customer", {
                    stripeID: user_stripeID,
                });
                return {
                    status: "ok",
                    stripeID: user_stripeID,
                };
            }
            catch (err) {
                console.error(err);
                throw err;
            }
        });
    }


};

Object.assign(module.exports, {
    User,
});
