const { Q } = require('pp-mysql/client').shorthands();
const { SEARCH, FIELD, Model } = require('./model');

/// User loan base data
class LoanBase extends Model {

    static MERCHANT = {
        CTE: 'merchant',
        SID: 'merchant_sid',
        NAME: 'merchant_name',
        LINK: 'merchant_link',
    };

    static fieldMerchant = {
        [FIELD.MODE]: FIELD.MODE_JOIN,
        [FIELD.CTE]: 'cteMerchant',// function for make CTE SQL
        [FIELD.JOIN]: 'joinMerchant',// function for make JOIN SQL
    };

    static PAYMETH = {
        CTE: 'paymeth',
        USER_ID: 'paymeth_user_id',
        SID: 'paymeth_sid',
        TYPE: 'paymeth_type',
        DIGITS: 'paymeth_digits',
    };

    static fieldPaymeth = {
        [FIELD.MODE]: FIELD.MODE_JOIN,
        [FIELD.CTE]: 'ctePaymeth',// function for make CTE SQL
        [FIELD.JOIN]: 'joinPaymeth',// function for make JOIN SQL
    };

    /// CTE for loan transactions
    static LOANTRX = {
        CTE: 'loantrx',
    };

    /// Next scheduled payment
    static NEXTTRX = {
        CTE: 'nexttrx',
        IROW: 'inext',
        NEXT_PAYMENT_DT: 'next_payment_dt',
        NEXT_PAYMENT_AMOUNT: 'next_payment_amount',
    };

    static fieldNextTrx = {
        [FIELD.MODE]: FIELD.MODE_JOIN,
        [FIELD.CTE]: 'cteLoanTrx',// function for make CTE SQL
        [FIELD.JOIN]: 'joinNextTrx',// function for make JOIN SQL
    };

    /// Last paid payment
    static LASTTRX = {
        CTE: 'lasttrx',
        IROW: 'ilast',
        LAST_PAYMENT_DT: 'last_payment_dt',
        LAST_PAYMENT_AMOUNT: 'last_payment_amount',
    };

    static fieldLastTrx = {
        [FIELD.MODE]: FIELD.MODE_JOIN,
        [FIELD.CTE]: 'cteLoanTrx',// function for make CTE SQL
        [FIELD.JOIN]: 'joinLastTrx',// function for make JOIN SQL
    };

    /// First payment (scheduled or paid)
    static FIRSTTRX = {
        CTE: 'firsttrx',
        IROW: 'ifirst',
        FIRST_PAYMENT_DT: 'first_payment_dt',
        FIRST_PAYMENT_AMOUNT: 'first_payment_amount',
        FIRST_PAYMENT_STATUS: 'first_payment_status',
    };

    static fieldFirstTrx = {
        [FIELD.MODE]: FIELD.MODE_JOIN,
        [FIELD.CTE]: 'cteLoanTrx',// function for make CTE SQL
        [FIELD.JOIN]: 'joinFirstTrx',// function for make JOIN SQL
    };

    static PERIOD = {
        FORTNIGHTLY: 'fortnightly',// Every 2 week
        MONTHLY: 'monthly',// Every month
        CUSTOM: 'custom',// Manual set date for each scheduled payments
    };

    static APPLY = {
        DRYRUN: 0,// Dry-run any adjust (see other modes)
        RESCHEDULE: 1,// Outstanding amount not changes, only reschedule payments
        CHANGE: 2,// Increase/Decrease outstanding amount, but amount must be > 0
        FORCE: 3,// Change amount may be < 0 (for return)
    };

    static table = 'loan';///< DB table

    /// API field => DB field
    static api2db = {
        [this.ID]: {// Integer ID of loan
            [FIELD.DBFIELD]: '_rowid',
        },
        [this.SID]: {// String ID of loan (Order ID)
            [FIELD.DBFIELD]: 'fullID',
            [FIELD.READONLY]: true,
        },
        'user_id': {// User ID
            [FIELD.DBFIELD]: 'userID',
            [FIELD.READONLY]: true,
        },
        'created_dt': {// Datetime of create loan
            [FIELD.DBFIELD]: 'created',
        },
        'total': {// Total amount of loan
            [FIELD.MODE]: FIELD.MODE_PATCH,
            [FIELD.SELECT]: `${Q(this.table)}.${Q('total')}/100`,// pences -> pounds
            [FIELD.UPDATE]: `${FIELD.VALUE_PLACE} * 100`,// pounds -> pences
        },
        'overdue': {},// Flag of overdue loan
        'pc_reference': {// Purchase reference of loan - short string code for ident loan for support
            [FIELD.DBFIELD]: 'referenceCode',
        },
        'pp_reference': {// PollenPay reference - Order ID converted to base64 string for support
            [FIELD.DBFIELD]: 'pollenReference',
        },
        'outstanding': {// Flag of outstanding loan
            [FIELD.MODE]: FIELD.MODE_CALC,
            [FIELD.SELECT]: `IF(${Q(this.table)}.${Q('balance')}>0,1,0)`,
        },
        'completed': {// Flag of completed loan
            [FIELD.MODE]: FIELD.MODE_CALC,
            [FIELD.SELECT]: `IF(${Q(this.table)}.${Q('balance')}<=0,1,0)`,
        },
        'outstanding_amount': {// Outstanding amount will be paid by user
            [FIELD.DBFIELD]: 'balance',
            [FIELD.MODE]: FIELD.MODE_PATCH,
            [FIELD.SELECT]: `${Q(this.table)}.${Q('balance')}/100`,// pences -> pounds
            [FIELD.UPDATE]: `${FIELD.VALUE_PLACE} * 100`,// pounds -> pences
        },
        [this.MERCHANT.SID]: {// Merchant SID (String ID),
            [FIELD.DBFIELD]: 'merchantID',
        },
        [this.MERCHANT.NAME]: {// Name of merchant (readonly by JOIN)
            ...this.fieldMerchant,
            [FIELD.SELECT]: `${Q(this.MERCHANT.CTE)}.${Q(this.MERCHANT.NAME)}`,
        },
        [this.MERCHANT.LINK]: {// Link to merchant site (readonly by JOIN)
            ...this.fieldMerchant,
            [FIELD.SELECT]: `${Q(this.MERCHANT.CTE)}.${Q(this.MERCHANT.LINK)}`,
        },
        [this.PAYMETH.SID]: {// User payment method SID (String ID)
            [FIELD.DBFIELD]: 'paymentMethod',
        },
        [this.PAYMETH.TYPE]: {// User payment method type
            ...this.fieldPaymeth,
            [FIELD.SELECT]: `${Q(this.PAYMETH.CTE)}.${Q(this.PAYMETH.TYPE)}`,
        },
        [this.PAYMETH.DIGITS]: {// User payment method digits
            ...this.fieldPaymeth,
            [FIELD.SELECT]: `${Q(this.PAYMETH.CTE)}.${Q(this.PAYMETH.DIGITS)}`,
        },
        [this.NEXTTRX.NEXT_PAYMENT_DT]: {
            ...this.fieldNextTrx,
            [FIELD.SELECT]: `IF(ISNULL(${Q(this.NEXTTRX.CTE)}.${Q('utm')}), NULL, FROM_UNIXTIME(${Q(this.NEXTTRX.CTE)}.${Q('utm')}/1000))`,
        },
        [this.NEXTTRX.NEXT_PAYMENT_AMOUNT]: {
            ...this.fieldNextTrx,
            [FIELD.SELECT]: `${Q(this.NEXTTRX.CTE)}.${Q('amount')}/100`,// pences -> pounds
        },
        [this.LASTTRX.LAST_PAYMENT_DT]: {
            ...this.fieldLastTrx,
            [FIELD.SELECT]: `IF(ISNULL(${Q(this.LASTTRX.CTE)}.${Q('utm')}), NULL, FROM_UNIXTIME(${Q(this.LASTTRX.CTE)}.${Q('utm')}/1000))`,
        },
        [this.LASTTRX.LAST_PAYMENT_AMOUNT]: {
            ...this.fieldLastTrx,
            [FIELD.SELECT]: `${Q(this.LASTTRX.CTE)}.${Q('amount')}/100`,// pences -> pounds
        },
        [this.FIRSTTRX.FIRST_PAYMENT_DT]: {
            ...this.fieldFirstTrx,
            [FIELD.SELECT]: `IF(ISNULL(${Q(this.FIRSTTRX.CTE)}.${Q('utm')}), NULL, FROM_UNIXTIME(${Q(this.FIRSTTRX.CTE)}.${Q('utm')}/1000))`,
        },
        [this.FIRSTTRX.FIRST_PAYMENT_AMOUNT]: {
            ...this.fieldFirstTrx,
            [FIELD.SELECT]: `${Q(this.FIRSTTRX.CTE)}.${Q('amount')}/100`,// pences -> pounds
        },
        [this.FIRSTTRX.FIRST_PAYMENT_STATUS]: {
            ...this.fieldFirstTrx,
            [FIELD.SELECT]: `${Q(this.FIRSTTRX.CTE)}.${Q('status')}`,
        },
    };

    /// Search parameters
    static search = {
        [this.SID]: {// String ID of loan (Order ID)
            [SEARCH.WEQ]: 200,// Weight of search word (EQ)ual field
            [SEARCH.WIEQ]: 100,// Weight of search word (I)ndepend case (EQ)ual field
            [SEARCH.WHAS]: 50,// Weight of field (HAS) search word inside
            [SEARCH.WIHAS]: 50,// Weight of field (I)ndepend case (HAS) search word inside
        },
        'pc_reference': {// Purchase reference of loan
            [SEARCH.WEQ]: 200,// Weight of search word (EQ)ual field
            [SEARCH.WIEQ]: 100,// Weight of search word (I)ndepend case (EQ)ual field
            [SEARCH.WHAS]: 50,// Weight of field (HAS) search word inside
            [SEARCH.WIHAS]: 50,// Weight of field (I)ndepend case (HAS) search word inside
        },
        'pp_reference': {// PollenPay reference
            [SEARCH.WEQ]: 200,// Weight of search word (EQ)ual field
            [SEARCH.WIEQ]: 100,// Weight of search word (I)ndepend case (EQ)ual field
            [SEARCH.WHAS]: 50,// Weight of field (HAS) search word inside
            [SEARCH.WIHAS]: 50,// Weight of field (I)ndepend case (HAS) search word inside
        },
    };

    /// Add special and for exclude deleted and archived rows
    static patchAnds(ands) {
        ands.push(`NOT IFNULL(${Q(this.table)}.${Q('deleted')}, FALSE)`);
        ands.push(`NOT IFNULL(${Q(this.table)}.${Q('archived')}, FALSE)`)
        return ands;
    };
}

module.exports = { LoanBase };
