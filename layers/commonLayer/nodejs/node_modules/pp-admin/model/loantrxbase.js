const { Q, q } = require('pp-mysql/client').shorthands();
const { SEARCH, FIELD } = require('./model');
const { LoanJSONBase } = require('./loanjsonbase');

/// Loan transactions base data
class LoanTrxBase extends LoanJSONBase {

    static STATUS = {
        PAID: 'paid',///< User paid transaction
        SCHEDULED: 'scheduled',///< Scheduled pay by user
    };

    static fieldTrx = {
        [FIELD.MODE]: FIELD.MODE_JOIN,
        [FIELD.REQ]: ['loan_id'],
        [FIELD.JOIN]: 'joinTrx',
    };

    /// API field => DB field
    static api2db = {
        ...super.api2db,
        [this.JSONORD]: {
            ...super.api2db[this.JSONORD],
            ...this.fieldTrx,
        },
        [this.SID]: {// String ID of loan transaction
            ...this.fieldTrx,
            [FIELD.SELECT]: `${Q(this.jsontable)}.${Q(this.SID)}`,
        },
        'user_id': {// User ID
            ...this.fieldTrx,
            [FIELD.SELECT]: `CAST(SUBSTRING(${Q(this.jsontable)}.${Q(this.SID)}, 1, LOCATE(${q('-')}, ${Q(this.jsontable)}.${Q(this.SID)}) - 1) AS UNSIGNED INTEGER)`,
        },
        'dt': {// Scheduled datetime of transaction
            ...this.fieldTrx,
            [FIELD.SELECT]: `FROM_UNIXTIME(${Q(this.jsontable)}.${Q('utm')}/1000)`,
        },
        'amount': {// Amount
            ...this.fieldTrx,
            [FIELD.SELECT]: `${Q(this.jsontable)}.${Q('amount')}/100`,// pences -> pounds
        },
        'status': {// Status of payment
            ...this.fieldTrx,
            [FIELD.SELECT]: `${Q(this.jsontable)}.${Q('status')}`,
        },
        'paid': {// Flag of paid transaction
            ...this.fieldTrx,
            [FIELD.SELECT]: `IF(${Q(this.jsontable)}.${Q('status')}=${q(this.STATUS.PAID)},1,0)`,
        },
        'scheduled': {// Flag of scheduled transaction
            ...this.fieldTrx,
            [FIELD.SELECT]: `IF(${Q(this.jsontable)}.${Q('status')}=${q(this.STATUS.SCHEDULED)},1,0)`,
        },
        'payment_sid': {// Stripe payment String ID
            ...this.fieldTrx,
            [FIELD.SELECT]: `${Q(this.jsontable)}.${Q('payment_sid')}`,
        },
    };

    /// Search parameters
    static search = {
        'payment_sid': {// String ID of payment
            [SEARCH.WEQ]: 200,// Weight of search word (EQ)ual field
            [SEARCH.WIEQ]: 100,// Weight of search word (I)ndepend case (EQ)ual field
            [SEARCH.WHAS]: 50,// Weight of field (HAS) search word inside
            [SEARCH.WIHAS]: 50,// Weight of field (I)ndepend case (HAS) search word inside
        },
    };

    /// Add special and for exclude rows
    static patchAnds(ands) {
    // Skip pays to merchant
        ands.push(`${Q(this.jsontable)}.${Q(this.SID)} NOT LIKE "%-0"`);
        return ands;
    }

    /// Construct SQL for JSON table from field
    static jsonTable() {
        return `JSON_TABLE(${Q(this.table)}.${Q('transactions')}, '$[*]' COLUMNS(${[
            `${Q(this.JSONORD)} FOR ORDINALITY`,
            `${Q(this.SID)} VARCHAR(64) path '$.txID'`,
            `${Q('amount')} DECIMAL(15, 4) path '$.amount'`,
            `${Q('payment_sid')} VARCHAR(32) path '$.paymentID'`,
            `${Q('status')} VARCHAR(32) path '$.status'`,
            `${Q('utm')} DECIMAL(20, 3) path '$.timestamp'`,// Unix timestamp with milliseconds
        ].join(',')}))`;
    }
}

module.exports = { LoanTrxBase };
