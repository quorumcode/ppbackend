const { Q } = require('pp-mysql/client').shorthands();

const { SEARCH, FIELD, Model } = require('./model');

/// User base data
class UserBase extends Model {

    static STATUS = {
        REJECTED: 'rejected',
        NOT_YET_SUBMITTED: 'not yet submitted',
    };

    static LOANS = {
        CTE: 'loans',
        LATEST_DT: 'loans_latest_dt',
        HAVE_OUTSTANDING: 'loans_have_outstanding',
        COUNT_OUTSTANDING: 'loans_count_outstanding',
        HAVE_COMPLETED: 'loans_have_completed',
        COUNT_COMPLETED: 'loans_count_completed',
        ORDER_IDS: 'loans_order_ids',
        PC_REFERENCES: 'loans_pc_references',
        PP_REFERENCES: 'loans_pp_references',
    };

    static fieldLoan = {
        [FIELD.MODE]: FIELD.MODE_JOIN,
        [FIELD.CTE]: 'cteLoans',// function for make CTE SQL
        [FIELD.JOIN]: 'joinLoans',// function for make JOIN SQL
    };

    static table = 'user_generic';///< DB table

    /// API field => DB field
    static api2db = {
        [this.ID]: {// Integer ID of user
            [FIELD.DBFIELD]: 'user',
        },

    // --- Name
        'name_first': {// First name
            [FIELD.DBFIELD]: 'name.givenName',
        },
        'name_middle': {// Middle name
            [FIELD.DBFIELD]: 'name.middleName',
        },
        'name_last': {// Last name (surname)
            [FIELD.DBFIELD]: 'name.surname',
        },

    // --- Email
        'email': {},// User email
        'email_confirmed': {// Flag of email confirmed
            [FIELD.DBFIELD]: 'emailConfirmed',
        },

    // --- Phone
        'phone': {// User phone
            [FIELD.DBFIELD]: 'primaryNumber',
        },
        'phone_confirmed': {// Flag of phone confirmed
            [FIELD.DBFIELD]: 'primaryStatus',
        },

    // --- Personal data
        'birthdate': {// Date of birth
            [FIELD.DBFIELD]: 'dob',
        },
        'sex': {},// User sex
        'created_dt': {// Datetime of create user
            [FIELD.DBFIELD]: 'created',
        },
        'blocked': {},// Flag of blocking
        'softblocked': {// Flag of soft blocking: can pay, but can't buy
            [FIELD.DBFIELD]: 'softlocked',
        },
        'stripe_id': {// ID of user at Stripe platform
            [FIELD.DBFIELD]: 'stripeID',
        },
        'lerex_id': {// ID of user at Lerex platform
            [FIELD.DBFIELD]: 'lerexID',
        },
        'primary_paymeth_sid': {// ID of primary payment method at provider
            [FIELD.DBFIELD]: 'primaryPaymentMethod',
        },
        [this.LOANS.LATEST_DT]: {// Date of latest loan (readonly by JOIN)
            ...this.fieldLoan,
            [FIELD.SELECT]: `${Q(this.LOANS.CTE)}.${Q(this.LOANS.LATEST_DT)}`,
        },
        [this.LOANS.HAVE_OUTSTANDING]: {// Flag of existing outstanding loans (readonly by JOIN)
            ...this.fieldLoan,
            [FIELD.SELECT]: `${Q(this.LOANS.CTE)}.${Q(this.LOANS.HAVE_OUTSTANDING)}`,
        },
        [this.LOANS.COUNT_OUTSTANDING]: {// Count of outstanding loans (readonly by JOIN)
            ...this.fieldLoan,
            [FIELD.SELECT]: `${Q(this.LOANS.CTE)}.${Q(this.LOANS.COUNT_OUTSTANDING)}`,
        },
        [this.LOANS.HAVE_COMPLETED]: {// Flag of existing completed loans (readonly by JOIN)
            ...this.fieldLoan,
            [FIELD.SELECT]: `${Q(this.LOANS.CTE)}.${Q(this.LOANS.HAVE_COMPLETED)}`,
        },
        [this.LOANS.COUNT_COMPLETED]: {// Count of completed loans (readonly by JOIN)
            ...this.fieldLoan,
            [FIELD.SELECT]: `${Q(this.LOANS.CTE)}.${Q(this.LOANS.COUNT_COMPLETED)}`,
        },
        [this.LOANS.ORDER_IDS]: {// List of all loan ids concat by spaces (readonly by JOIN)
            ...this.fieldLoan,
            [FIELD.SELECT]: `${Q(this.LOANS.CTE)}.${Q(this.LOANS.ORDER_IDS)}`,
        },
        [this.LOANS.PC_REFERENCES]: {// List of all loan purchase references concat by spaces (readonly by JOIN)
            ...this.fieldLoan,
            [FIELD.SELECT]: `${Q(this.LOANS.CTE)}.${Q(this.LOANS.PC_REFERENCES)}`,
        },
        [this.LOANS.PP_REFERENCES]: {// List of all loan pollenpay references concat by spaces (readonly by JOIN)
            ...this.fieldLoan,
            [FIELD.SELECT]: `${Q(this.LOANS.CTE)}.${Q(this.LOANS.PP_REFERENCES)}`,
        },

    // --- Document scans
        'kyc_dt': {// Datetime of put document scans to KYC
            [FIELD.DBFIELD]: 'KYCDate',
        },
        'kyc_lerex_submitted': {// Flag of submit document scans to Lerex
            [FIELD.DBFIELD]: 'lerexKYCSubmitted',
        },

    // --- Passport
        'passport_status': {// Status of verification identity (passport page with photo)
            [FIELD.DBFIELD]: 'IDStatus',
        },
        'passport_filelink': {// Link to file of identity (passport page with photo)
            [FIELD.DBFIELD]: 'idFileLink',
        },
        'passport_identity_id': {// ID of identity at MATI (passport page with photo)
            [FIELD.DBFIELD]: 'identityId',
        },
        'passport_verification_id': {// ID of verify at MATI for identity (passport page with photo)
            [FIELD.DBFIELD]: 'verificationID',
        },

    // --- Address
        'address_street_number': {// Address street and house number
            [FIELD.DBFIELD]: 'address.street_number',
        },
        'address_locality': {// Address locality
            [FIELD.DBFIELD]: 'address.locality',
        },
        'address_route': {// Address route
            [FIELD.DBFIELD]: 'address.route',
        },
        'address_administrative_division': {// Address administrative division
            [FIELD.DBFIELD]: 'address.administrative_division',
        },
        'address_postal_code': {// Address postal code
            [FIELD.DBFIELD]: 'address.postal_code'
        },

        'address_status': {// Status of verification address (passport page with address)
            [FIELD.DBFIELD]: 'addressStatus',
        },
        'address_filelink': {// Link to file of address in identity (passport page with address)
            [FIELD.DBFIELD]: 'addressFileLink',
        },
        'address_identity_id': {// ID of identity at MATI (passport page with address)
            [FIELD.MODE]: FIELD.MODE_CALC,
            [FIELD.SELECT]: null,
        },
        'address_verification_id': {// ID of verify at MATI for address (passport page with address)
            [FIELD.DBFIELD]: 'addressVerificationID',
        },
    };

    /// Search parameters
    static search = {
        'name_first': {// First name
            [SEARCH.WEQ]: 20,// Weight of search word (EQ)ual field
            [SEARCH.WIEQ]: 20,// Weight of search word (I)ndepend case (EQ)ual field
            [SEARCH.WHAS]: 10,// Weight of field (HAS) search word inside
            [SEARCH.WIHAS]: 10,// Weight of field (I)ndepend case (HAS) search word inside
        },
        'name_middle': {// Middle name
            [SEARCH.WEQ]: 20,// Weight of search word (EQ)ual field
            [SEARCH.WIEQ]: 20,// Weight of search word (I)ndepend case (EQ)ual field
            [SEARCH.WHAS]: 10,// Weight of field (HAS) search word inside
            [SEARCH.WIHAS]: 10,// Weight of field (I)ndepend case (HAS) search word inside
        },
        'name_last': {// Last name (surname)
            [SEARCH.WEQ]: 50,// Weight of search word (EQ)ual field
            [SEARCH.WIEQ]: 50,// Weight of search word (I)ndepend case (EQ)ual field
            [SEARCH.WHAS]: 25,// Weight of field (HAS) search word inside
            [SEARCH.WIHAS]: 25,// Weight of field (I)ndepend case (HAS) search word inside
        },
        'email': {// User email
            [SEARCH.WEQ]: 100,// Weight of search word (EQ)ual field
            [SEARCH.WIEQ]: 100,// Weight of search word (I)ndepend case (EQ)ual field
            [SEARCH.WHAS]: 50,// Weight of field (HAS) search word inside
            [SEARCH.WIHAS]: 50,// Weight of field (I)ndepend case (HAS) search word inside
        },
        'phone': {// User phone
            [SEARCH.WEQ]: 100,// Weight of search word (EQ)ual field
            [SEARCH.WIEQ]: 100,// Weight of search word (I)ndepend case (EQ)ual field
            [SEARCH.WHAS]: 50,// Weight of field (HAS) search word inside
            [SEARCH.WIHAS]: 50,// Weight of field (I)ndepend case (HAS) search word inside
        },
        [this.LOANS.ORDER_IDS]: {// List of all loan ids concat by spaces (readonly by JOIN)
            [SEARCH.CONCAT]: true,// Flag, that field is GROUP_CONCAT of string
            [SEARCH.WEQ]: 200,// Weight of search word (EQ)ual field
            [SEARCH.WIEQ]: 100,// Weight of search word (I)ndepend case (EQ)ual field
            [SEARCH.WHAS]: 50,// Weight of field (HAS) search word inside
            [SEARCH.WIHAS]: 50,// Weight of field (I)ndepend case (HAS) search word inside
        },
        [this.LOANS.PC_REFERENCES]: {// List of all loan purchase references concat by spaces (readonly by JOIN)
            [SEARCH.CONCAT]: true,// Flag, that field is GROUP_CONCAT of string
            [SEARCH.WEQ]: 200,// Weight of search word (EQ)ual field
            [SEARCH.WIEQ]: 100,// Weight of search word (I)ndepend case (EQ)ual field
            [SEARCH.WHAS]: 50,// Weight of field (HAS) search word inside
            [SEARCH.WIHAS]: 50,// Weight of field (I)ndepend case (HAS) search word inside
        },
        [this.LOANS.PP_REFERENCES]: {// List of all loan pollenpay references concat by spaces (readonly by JOIN)
            [SEARCH.CONCAT]: true,// Flag, that field is GROUP_CONCAT of string
            [SEARCH.WEQ]: 200,// Weight of search word (EQ)ual field
            [SEARCH.WIEQ]: 100,// Weight of search word (I)ndepend case (EQ)ual field
            [SEARCH.WHAS]: 50,// Weight of field (HAS) search word inside
            [SEARCH.WIHAS]: 50,// Weight of field (I)ndepend case (HAS) search word inside
        },
    };

    /// Add related fields to get, if need
    static patchGet(get) {
        return this.patchGetByPools(get, [
            ['blocked', 'softblocked', 'passport_status', 'passport_identity_id', 'passport_verification_id'],
            ['blocked', 'softblocked', 'address_status', 'address_identity_id', 'address_verification_id'],
        ]);
    };

    /// Add special and for exclude deleted
    static patchAnds(ands) {
        ands.push(`NOT IFNULL(${Q(this.table)}.${Q('deleted')}, FALSE)`);
        return ands;
    };
}

module.exports = { UserBase };
