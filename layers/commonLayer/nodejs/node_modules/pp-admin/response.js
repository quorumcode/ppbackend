class Response {
    /// Make response CORS headers
    static responseHeaders(request) {
        const headers = request?.headers ?? {};
        const origin = headers['Origin'] ?? (headers['origin'] ?? headers['ORIGIN']);
        return {
            'Access-Control-Allow-Origin': origin ?? '*',
            'Access-Control-Allow-Methods': 'OPTIONS, GET, POST',
            'Access-Control-Allow-Headers': 'Content-Type,X-Requested-With,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,User,AccessToken',
            'Access-Control-Allow-Credentials': 'False',
        }
    };

    /// Success response
    static resolve(request, res) {
        return {
            statusCode: 200,
            headers: Response.responseHeaders(request),
            body: JSON.stringify({ err: false, res }),
        };
    };

    /// Error response
    static reject(request, message = 'Unknown error', code = 400) {
        if ((!request.headers) || (!request.headers['test'])) console.log(`HTTP ${code.toString()} ${message}`);
        return {
            statusCode: code,
            headers: Response.responseHeaders(request),
            body: JSON.stringify({ err: true, rej: { message, code } }),
        };
    };

    static auth(id, effect = 'Deny', resource = '*', additional = {}) {
        return {
            principalId: String(id).replace(/^\+/,''),
            policyDocument: {
                Version: '2012-10-17',
                Statement: [{
                    Action: 'execute-api:Invoke',
                    Effect: effect,
                    Resource: resource
                }]
            },
            ...additional,
        }
    }
}

module.exports = { Response };
