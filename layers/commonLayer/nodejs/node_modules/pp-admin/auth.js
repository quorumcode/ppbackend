const { Response } = require('./response');
const { User } = require('./model/user');

/// Admin authorization
class Auth {

    /// Token for authorize AS ANY user
    static SUPER_ACCESS_TOKEN = 'f1822d2fe58daeadc88e0e4eef2f155fc3edd3713ff9a5d1e27696afd9231d905db51c98dcf0c6416658239b8d3b5893c5775ffd7941f769a78fcd684c5f9161';

    /// Execute authorization
    static async exec(request) {
        let deny_id = 'UNKNOWN';
        try {
            const headers = request?.headers ?? {};

            let hphone; let accessToken;
            Object.keys(headers).forEach((header) => {
                const sheader = header.toLowerCase();
                if ('user' === sheader) hphone = headers[header];
                if ('accesstoken' === sheader) accessToken = headers[header];
            });

            if (!accessToken) throw new Error(`Missing AccessToken`);
            if (!hphone) throw new Error(`Missing User`);

            const phone = deny_id = this.checkPhone(hphone);
            if (!phone) throw new Error(`Invalid phone number '${hphone}'`);

        // Check super access
            if ((!this.SUPER_ACCESS_TOKEN) || (this.SUPER_ACCESS_TOKEN !== accessToken)) {

            // Check token
                const { Token } = require('token');
                const token = new Token(phone, Date.now());
                if (!token.validateAccess(accessToken)) throw new Error(`Invalid token '${accessToken}'`);
            }

        // Hack for get hidden from public user fields
            User.api2db['deleted'] = {};

        // Get users by phone
            const users = await User.tbl(['blocked', 'deleted'], [ { fld: 'phone', val: phone }]);

        // Not found or not unique
            if ((!users) || (!users.body) || (!users.body.length) || (users.body.length > 1)) throw new Error(`Not found user '${phone}'`);

        // Get found single user
            const user = users.body[0];
            deny_id = user.id;

        // Deny blocked and deleted user
            if ((user['blocked'] ?? true) || (user['deleted'] ?? true)) throw new Error(`Blocked or deleted user '${user.id}'`);

        // All valid, allow user
            return Response.auth(user.id, 'Allow');
        }
        catch (err) {
            console.log(`Deny '${deny_id}': ${err.toString()}`);
            return Response.auth(deny_id, 'Deny', request.methodArn ?? '*', {
                err: err.toString(),
                req: request,
            });
        }
    }

    /// Check User header
    static checkPhone(user_id) {

        // +123456789 is Apple test account that talks to test env on the live iOS App
        if ('+123456789' === user_id) return user_id;

        // Check phone number
        const { phone } = require('phone');
        const { isValid, phoneNumber, countryCode } = phone(user_id);

        // Skip invalid and American phone numbers
        if ((!isValid) || ('+1' === countryCode)) return false;
        return phoneNumber;
    }
}

module.exports = { Auth };
